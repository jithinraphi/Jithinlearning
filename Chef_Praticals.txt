Chef Praticals



chef-client --local-mode default.rb			//It will check the convergence.
ruby -c default.rb && foodcritic default.rb 	//&& It will check the first arg,if success will check the second.
chef-client default.rb						//It will run the file



chef generate app first_cookbook			//Generating a cookbook

1)Installing the apache package
vim webserver.rb

apt_update 'Update the apt cache daily' do
  frequency 86_400
  action :periodic
end

package 'apache2'

sudo chef-client --local-mode webserver.rb

2)Start and enable the Apache service
Modify webserver.rb

apt_update 'Update the apt cache daily' do
  frequency 86_400
  action :periodic
end

package 'apache2'

service 'apache2' do
  supports status: true
  action [:enable, :start]
end

3)Add a homepage
apt_update 'Update the apt cache daily' do
  frequency 86_400
  action :periodic
end

package 'apache2'

service 'apache2' do
  supports status: true
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end


4)Creating a Cookbook
a)chef generate cookbook cookbooks/learn_chef_apache2	//It will create a cookbook names learn_chef_apache2
b)chef generate template cookbooks/learn_chef_apache2 index.html	\\Run this command if we are running
from the Chef_Repo folder.
cookbooks
└── learn_chef_apache2
├── templates
    │   └── index.html.erb
The .erb extension simply means that the file can have placeholders
c)Now copy the contents of the HTML file from your recipe to the new HTML file, index.html.erb.
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>

d)Update the recipe to reference the HTML template
Write out the recipe, default.rb, like this.

e)Run the cookbook
Now run the cookbook. To do so, we use the chef-client command and specify what's called the run-list.

sudo chef-client --local-mode --runlist 'recipe[learn_chef_apache2]'
A run-list specifies each of the individual recipes from your cookbook that you want to apply. 

f)What does a cookbook do?
It includes recipes and external information and makes them easier to manage.
What is a run-list?
A run-list specifies which recipes to run and the order in which to run them.
What does test and repair mean?
Chef applies changes only when they are necessary.

-------------------------------------------------------------------------------------------
5)Workstation
Workstation can be any machine - Windows,Linux or mac 
We need to install Chef DK on it
The knife command enables you to communicate with the Chef server from your workstation.
a)configure your workstation
knife is the command-line tool that provides an interface between your workstation and the Chef server. knife 
enables you to upload your cookbooks to the Chef server and work with nodes, the servers that you manage.

knife requires two files to authenticate with the Chef server.

a1)an RSA private key
Every request to the Chef server is authenticated through an RSA public key pair. The Chef server holds the 
public part; you hold the private part.

a2)a knife configuration file
The configuration file is typically named knife.rb. It contains information such as the Chef server's URL, the location
of your RSA private key, and the default location of your cookbooks.

Both of these files are typically located in a directory named .chef. By default, every time knife runs, it looks
in the current working directory for the .chef directory. If the .chef directory does not exist, knife 
searches up the directory tree for a .chef directory. This process is similar to how tools such as Git work.

a1)Generate your knife configuration file
Here's how to create your knife configuration file. Your file will be located at ~/learn-chef/.chef/knife.rb.

Sign in to https://manage.chef.io/login.
From the Administration tab, select your organization.
From the menu on the left, select Generate Knife Config and save the file.
cp ~/Downloads/knife.rb ~/learn-chef/.chef

a2)Generate your RSA private key
Here's how to create your RSA private key. Your file will be located at ~/learn-chef/.chef/<username>.pem, where <username> is the name you chose when you created your hosted Chef account.

Sign in to https://manage.chef.io/.
From the Administration tab, select Users from the menu on the left.
Select your user name, select Reset key from the menu on the left.
cp ~/Downloads/username.pem ~/learn-chef/.chef

knife ssl check		//to validate your connection to the Chef server.

---------------------------------------------------------------------------------
6)Upload a cookbook to Chef server
upload the learn_chef_apache2 cookbook to your Chef server. Run this command from anywhere under your
~/learn-chef directory.

knife cookbook upload learn_chef_apache2

a)Which command lists which cookbooks are on the Chef server?
knife cookbook list
------------------------------------------------------------------------------------
7)Bootstrap your node
Set up chef-client on your node, associate it with your Chef server, and apply your Apache cookbook to it.
7a)Bootstrap using password authentication
Replace ADDRESS with your remote node's external address, USER with your username, and PASSWORD 
with your user's password.
knife bootstrap ADDRESS --ssh-user USER --ssh-password 'PASSWORD' --sudo --use-sudo-password
 --node-name node1-ubuntu --run-list 'recipe[learn_chef_apache2]'
 
 Run the above command from the machine where cookbook called learn_chef_apache2 is present
 
 knife bootstrap 54.254.151.91 --ssh-user user --ssh-password 'cybage@123'
 --sudo --use-sudo-password --node-name node1-ubuntu --run-list 'recipe[learn_chef_apache2]'

7b)Confirm the result
 
knife node list
node1-ubuntu
knife node show node1-ubuntu

curl <ip address of the node>
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
----------------------------------------------------------------------------------------------------------
1)Update your node configuration
a)You ran knife bootstrap to associate your node with the Chef server and do an initial check-in.
Bootstrapping is a one-time process.
b)The knife winrm command enables you to update your node's configuration when your cookbook changes.

c.1)Add template code to your HTML(Inside cookbook/learn_chef_apache2/template folder)
change index.html.erb
<html>
  <body>
    <h1>hello from <%= node['fqdn'] %></h1>
  </body>
</html

Here The <%= %> syntax enables you to provide placeholders in your template file. Placeholders are replaced
with their values when chef-client runs.
c.2)Update the cookbook's version metadata
Your cookbook's metadata.rb file holds the cookbook's version
Update your cookbook's version from 0.1.0 to 0.2.0.
c.3)Upload your cookbook to the Chef server
knife cookbook upload learn_chef_apache2	//Here learn_chef_apache2 is the cookbook name
Till this step we need to run on chef workstation.'

c.4)Run the cookbook on your node
Now that your updated cookbook is on the Chef server, you can run chef-client on your node. The chef-client
command pulls from Chef server the latest cookbooks from the node's run-list and applies the run-list to 
the node.
sudo chef-client 		//run this command from the chef node.

2)Run chef-client periodically
f)The take aways from this module
f.1)use community cookbooks from Chef Supermarket.
f.2)use Berkshelf to resolve cookbook dependencies.
f.3)use a role to define your node's attributes and its run-list.
a)Get the chef-client cookbook
On Linux, the chef-client cookbook sets up chef-client to run as a service. On Windows, this cookbook
sets up chef-client to run as a scheduled task.
Berkshelf is a tool that helps you resolve cookbook dependencies. Berkshelf can retrieve the cookbooks that your cookbook depends on and 
can upload your cookbooks to your Chef server. Berkshelf comes with the Chef DK.

You need to create a configuration file that tells Berkshelf which cookbooks you want and where they're located
a1)create a file named Berksfile and add these contents(inside learn-chef folder)
source 'https://supermarket.chef.io'
cookbook 'chef-client'

Your Berksfile specifies that you want the chef-client cookbook and to pull cookbooks from the public Chef
Supermarket server.
berks install to download the chef-client cookbook and its dependencies
sudo berks install

Berkshelf downloads the chef-client cookbook and its dependent cookbooks to the ~/.berkshelf/cookbooks directory.
sudo berks upload //To upload chef-client cookbook and its dependencies to Chef server. 

b)Create a role
chef-client is run is controlled by two node attributes (source code):

node['chef_client']['interval'] – interval specifies the number of seconds between chef-client runs. The default
value is 1,800 (30 minutes).
node['chef_client']['splay'] – splay specifies a maximum random number of seconds that is added to the interval.
Splay helps balance the load on the Chef server by ensuring that many chef-client runs are not occurring at
the same interval. The default value is 300 (5 minutes).
Roles are stored as objects on the Chef server. 
Created a folder called role and inside that created a web.json(which is role)
{
   "name": "web",
   "description": "Web server role.",
   "json_class": "Chef::Role",
   "default_attributes": {
     "chef_client": {
       "interval": 300,
       "splay": 60
     }
   },
   "override_attributes": {
   },
   "chef_type": "role",
   "run_list": ["recipe[chef-client::default]",
                "recipe[chef-client::delete_validation]",
                "recipe[learn_chef_apache2::default]"
   ],
   "env_run_lists": {
   }
}

b1)knife role from file web.json 		//command to upload your role to the Chef server.
As a verification step, you can run the below command to view the roles on your Chef server.
knife role list
web
b2)knife role show web					//to view the role details
b3)knife node run_list set node1-ubuntu "role[web]"   		//The final step is to set your node's run-list.  					
	
c)How to clean up your environment
c1)Delete the node from the Chef server
knife node delete node1-ubuntu --yes			//to remove the node's metadata from the Chef server
knife client delete node1-ubuntu --yes			//to delete the entry (including the public part of the 
												RSA key pair) from the Chef server's API client list.
c2)Delete your cookbook from the Chef server
knife cookbook delete learn_chef_apache2 --all --yes		//learn_chef_apache2 is the cookbook name
If you omit the --all argument, you'll be prompted to select which version to delete.
c3)Delete the role from the Chef server
knife role delete web --yes

----------------------------------------------------------------------------------------------------------
3)Apply a cookbook locally
3.a)Test Kitchen enables you to run your cookbooks in a temporary environment that resembles production.
a.i)kitchen create - Test kitchen creates an instance of your virtual environment, for example,
an Ubuntu virtual machine.
a.ii)kitchen coverage - Test Kitchen applies your cookbook to the virtual environment.
a.iii)kitchen login - Test Kitchen creates an SSH session into your virtual environment.
a.iv)verify - you manually verify that your virtual environment is configured as you expect.
a.v)Test Kitchen shuts down and destroys your virtual environment.
3.b)Examine the Test Kitchen configuration file
When you use the chef generate cookbook command to create a cookbook, Chef creates a file named .kitchen.yml in the root directory of your
cookbook. .kitchen.yml defines what's needed to run Test Kitchen, including which virtualization provider to 
use, how to run Chef, and what platforms to run your code on.
This file(.kitchen.yml) will be present inside cookbook(learn_chef_apache2) folder.
3.b.i)
Here's how the .kitchen.yml file breaks down.

b.i.a)driver- specifies the software that manages the machine. We're using the Vagrant Test Kitchen driver 
(list of other popular drivers). The Vagrant driver works with VirtualBox by default.
b.i.b)provisioner- specifies how to run Chef. We use chef_zero because it enables you to mimic a Chef server 
environment on your local machine. This allows us to work with node attributes and other Chef server features.
b.i.c)transport- specifies how to execute commands remotely on the test instance. WinRM is the default transport
on Windows; SSH is the default on all other operating systems.
b.i.d)verifier- specifies which application to use when running automated tests. You'll learn more about automated
testing in a future module.
b.i.e)platforms- specifies the target operating systems. We're targeting just one – Ubuntu 14.04.
b.i.f)suites- specifies what we want to apply to the virtual environment. You can have more than one suite. 
We define just one, named default. This is where we provide the run-list, which defines which recipes to run 
and in the order to run them. Your run-list contains one recipe – the learn_chef_apache2 cookbook's default 
recipe.
 
3.c)Create the Test Kitchen instance
Before creating the test kitchen,we need to install the following packages
1)Vagrant 2)VirtualBox
sudo apt install vagrant
vagrant init
vagrant up		//This can be perfomed only after installing virtualbox in the system.
2)VirtualBox
sudo apt install virtualbox

kitchen create 		//For creating the test kitchen.
kitchen destroy 	//If you need to destroy your instance before you complete this module
